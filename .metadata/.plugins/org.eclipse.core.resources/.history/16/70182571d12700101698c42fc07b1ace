package demo;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;

public class DuplicateEmployee {

	int id;
	String name;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public DuplicateEmployee(int id, String name) {
		super();
		this.id = id;
		this.name = name;
	}
	

	@Override
	public int hashCode() {
		return Objects.hash(id, name);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		DuplicateEmployee other = (DuplicateEmployee) obj;
		return id == other.id && Objects.equals(name, other.name);
	}

	@Override
	public String toString() {
		return "DuplicateEmployee [id=" + id + ", name=" + name + "]";
	}

	public static void main(String[] args) {
		List<DuplicateEmployee> list= Arrays.asList(new DuplicateEmployee(101, "Laxman"), 
				new DuplicateEmployee(102, "Laxman Rao"), new DuplicateEmployee(101, "Laxman"));
		
		list.stream().collect(Collectors.groupingBy(n->n,
				Collectors.counting())).entrySet().stream().filter(entry->entry.getValue()>1)
		.collect( Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))
		.forEach((k,v)->System.out.println(k+":"+v));
		System.out.println("---------------");
		list.stream().collect(Collectors.groupingBy(Function.identity(),
				Collectors.counting())).entrySet().stream().filter(entry->entry.getValue()>1)
		.map( Map.Entry::getKey)
		.forEach(System.out::println);
		System.out.println("---------------");
		Set<Integer> s= new HashSet<>();
		
		Set<DuplicateEmployee> d=list.stream().filter(e->!s.add(e.getId()))
				.collect(Collectors.toSet());
		System.out.println(d);
		System.out.println("---------------");
		 list.stream()
         .collect(Collectors.groupingBy(e -> e, Collectors.counting()))
         .entrySet().stream()
         .filter(entry -> entry.getValue() > 1)
         .forEach(entry -> System.out.println(entry.getKey() + " : " + entry.getValue()));
		
		
	}
}
