package com.example.spring_boot_authorization_server;

import java.util.UUID;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.core.AuthorizationGrantType;
import org.springframework.security.web.SecurityFilterChain;
package com.example.authserver.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;
import org.springframework.security.oauth2.core.AuthorizationGrantType;
import org.springframework.security.oauth2.server.authorization.config.ProviderSettings;
import org.springframework.security.oauth2.server.authorization.config.TokenSettings;
import org.springframework.security.oauth2.server.authorization.client.RegisteredClient;
import org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;
import org.springframework.security.oauth2.server.authorization.client.InMemoryRegisteredClientRepository;
import org.springframework.security.oauth2.server.authorization.settings.AuthorizationServerSettings;

import java.time.Duration;
import java.util.UUID;


@Configuration(proxyBeanMethods = false)
public class AuthorizationServerConfig {
	 @Bean
	    public RegisteredClientRepository registeredClientRepository() {
	        RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())
	            .clientId("my-client")
	            .clientSecret("{noop}my-secret")
	            .scope("read")
	            .scope("write")
	            .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)
	            .tokenSettings(TokenSettings.builder()
	                .accessTokenTimeToLive(Duration.ofHours(1))
	                .build())
	            .build();
	        return new InMemoryRegisteredClientRepository(registeredClient);
	    }

	    @Bean
	    public AuthorizationServerSettings authorizationServerSettings() {
	        return AuthorizationServerSettings.builder().build();
	    }
}
