import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

public class Employee {

	private int id;
	private String name;
	private Double salary;

	public Employee() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Employee(int id, String name, Double salary) {
		super();
		this.id = id;
		this.name = name;
		this.salary = salary;
	}

	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", salary=" + salary + "]";
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Double getSalary() {
		return salary;
	}

	public void setSalary(Double salary) {
		this.salary = salary;
	}

	public static void main(String[] args) {
		List<Employee> listOfEmployee = Arrays.asList(new Employee(101, "Alice", 75000.0),
				new Employee(102, "Bob", 82000.0), new Employee(103, "Charlie", 67000.0),
				new Employee(106, "Jhon", 88000.0), new Employee(107, "Sany", 67000.0),
				new Employee(104, "David", 92000.0), new Employee(105, "Eva", 88000.0));

		List<Double> duplicateSalaries = listOfEmployee.stream()
				.map(Employee::getSalary).distinct().sorted(Comparator.reverseOrder())
				.collect(Collectors.toList());
		  if (duplicateSalaries.size() < 2) {
			  return;
		  }
		Double secoundHighestSalary= duplicateSalaries.get(1);
		
		listOfEmployee.stream().filter(e->Double.compare(e.getSalary(), secoundHighestSalary)==0).collect(Collectors.toList())
		.forEach(System.out::println);

	}

}
